@page "/"
@using Microsoft.Extensions.Configuration
@inject NonceConfig nonceConfig
@inject IConfiguration Configuration
@{
    string serverUrl = Configuration["Urls:ElsaServer"];
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Elsa Workflows</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-16x16.png">
    <link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/fonts/inter/inter.css">
    <link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.css">
    <link rel="stylesheet" href="/css/site.css">
    <script nonce ="@nonceConfig.ElsaSetup"  src="/_content/Elsa.Designer.Components.Web/monaco-editor/min/vs/loader.js"></script>
    <script nonce ="@nonceConfig.ElsaSetup"  type="module" src="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.esm.js"></script>
    <script nonce ="@nonceConfig.ElsaSetup"  type="module" src="/static/build/custom-elsa.esm.js"></script>
    <style>
    </style>
</head>
<body>
<elsa-studio-root server-url="@serverUrl" monaco-lib-path="_content/Elsa.Designer.Components.Web/monaco-editor/min">
    <elsa-studio-dashboard></elsa-studio-dashboard>
</elsa-studio-root>
<script nonce="@nonceConfig.ElsaSetup">
        var elsaStudioRoot = document.querySelector('elsa-studio-root');

        function MyCustomPlugin(elsaStudio) {
            var eventBus = elsaStudio.eventBus;

            eventBus.on('activity-design-displaying',
                e => {
                  console.log(e);
                    if (e.activityModel.type == "QuestionScreen" || e.activityModel.type == "CheckYourAnswersScreen")
                        e.outcomes = e.outcomes.filter(x => x !== 'Default' && x !== 'Done');
                        else if(e.activityModel.type == "ConfirmationScreen"){
                          e.outcomes = e.outcomes.filter(x => x == 'Done');
                        }
                });
        };

        function getOrCreateProperty(activity, name, defaultExpression, defaultSyntax) {
            var property = activity.properties.find(function (x) { return x.name == name; });
            if (!property) {
                var expressions = {};
                var syntax = defaultSyntax ? defaultSyntax() : undefined;
                if (!syntax)
                    syntax = 'Literal';
                expressions[syntax] = defaultExpression ? defaultExpression() : undefined;
                property = { name: name, expressions: expressions, syntax: null };
                activity.properties.push(property);
            }

            return property;
        }

        function MyCustomInputDriver(elsaStudio, elementName) {
            this.display = (activity, property) => {

                console.log("Elsa Studio", elsaStudio);
                console.log("Property", property);
                console.log("Activity", activity);
                var prop = (0, getOrCreateProperty)(activity, property.name);
                var questionActivity = document.createElement(elementName);
                questionActivity.activityModel = activity;
                questionActivity.propertyDescriptor = property;
                questionActivity.propertyModel = prop;
                return questionActivity;
            }
        }

        function MyCustomOutcomeDriver(elsaStudio, elementName, elsaClient) {
            console.log("Setting outcome driver");
            this.display = (activity, property) => {
                let url = new URL(window.location.href);
                var parts = url.pathname.split('/');
                var workflowDefinitionId = parts[2];
                console.log(workflowDefinitionId);

                console.log("Elsa Studio", elsaStudio);
                console.log("Property", JSON.stringify(property));
                console.log("Activity", JSON.stringify(activity));
                var prop = (0, getOrCreateOutcomeProperty)(activity, property.name, 'Json', 'Json');
                var questionActivity = document.createElement(elementName);
                questionActivity.activityModel = activity;
                questionActivity.propertyDescriptor = property;
                questionActivity.propertyModel = prop;
                questionActivity.elsaClient = elsaClient;
                questionActivity.workflowDefinitionId = workflowDefinitionId;
                return questionActivity;
            }
        }

        function getOrCreateOutcomeProperty(activity, name, defaultExpression, defaultSyntax) {
            var property = activity.properties.find(function (x) { return x.name == name; });
            if (!property) {
                console.log("creating property");
                var expressions = {};
                var syntax = defaultSyntax ? defaultSyntax : undefined;
                if (!syntax)
                    syntax = '{Json}';
                expressions[syntax] = defaultExpression ? defaultExpression : undefined;
                property = { name: name, expressions: expressions, syntax: syntax };
                console.log(property);
                activity.properties.push(property);
            }
            console.log("property", property);
            return property;

        }

        elsaStudioRoot.addEventListener('initializing', e => {

          this.InitCustomDrivers(e).then(true);

        });

        async function InitCustomDrivers(e) {
            console.log('E', e);

            var elsaStudio = e.detail;
            elsaStudio.pluginManager.registerPlugin(MyCustomPlugin);

            var elsaClient = await elsaStudio.elsaClientFactory();
            console.log("Elsa client", elsaClient);
            //const libSource = await elsaClient.scriptingApi.getJavaScriptTypeDefinitions(this.workflowDefinitionId, this.context);
            elsaStudio.propertyDisplayManager.addDriver('question-builder', () => new MyCustomInputDriver(elsaStudio, 'elsa-question-screen'));
            //elsaStudio.propertyDisplayManager.addDriver('outcome-builder', () => new MyCustomOutcomeDriver(elsaStudio, 'elsa-outcome-screen', elsaClient));
        }

</script>
</body>
</html>
