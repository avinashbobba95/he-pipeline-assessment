/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActivityDefinitionProperty, ActivityModel, ActivityPropertyDescriptor, IntellisenseContext } from "./models/elsa-interfaces";
import { CheckboxQuestion, IOutcomeProperty, IQuestionComponent, ITextProperty, RadioQuestion } from "./models/custom-component-models";
import { IconProvider } from "./components/icon-provider/icon-provider";
export namespace Components {
    interface CustomElsaSwitchCasesProperty {
        "activityModel": ActivityModel;
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
    }
    interface CustomInputProperty {
        "context"?: string;
        "customProperty": ITextProperty;
        "editorHeight": string;
        "index": number;
        "intellisenseContext": IntellisenseContext;
        "propertyDescriptor": ActivityPropertyDescriptor;
        "showLabel": boolean;
        "singleLineMode": boolean;
        "supportedSyntaxes": Array<string>;
    }
    interface CustomOutcomeListProperty {
        "activityModel": ActivityModel;
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
    }
    interface CustomOutcomeProperty {
        "context"?: string;
        "editorHeight": string;
        "iconProvider": IconProvider;
        "index": number;
        "intellisenseContext": IntellisenseContext;
        "outcome": IOutcomeProperty;
        "propertyDescriptor": ActivityPropertyDescriptor;
        "showLabel": boolean;
        "singleLineMode": boolean;
        "supportedSyntaxes": Array<string>;
    }
    interface CustomTextProperty {
        "activityModel": ActivityModel;
        "editorHeight": string;
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
        "singleLine": boolean;
    }
    interface MultiQuestionProperty {
        "activityModel": ActivityModel;
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
    }
    interface QuestionCheckboxProperty {
        "question": CheckboxQuestion;
    }
    interface QuestionProperty {
        "ActivityModel": ActivityModel;
        "question": IQuestionComponent;
    }
    interface QuestionRadioProperty {
        "question": RadioQuestion;
    }
}
declare global {
    interface HTMLCustomElsaSwitchCasesPropertyElement extends Components.CustomElsaSwitchCasesProperty, HTMLStencilElement {
    }
    var HTMLCustomElsaSwitchCasesPropertyElement: {
        prototype: HTMLCustomElsaSwitchCasesPropertyElement;
        new (): HTMLCustomElsaSwitchCasesPropertyElement;
    };
    interface HTMLCustomInputPropertyElement extends Components.CustomInputProperty, HTMLStencilElement {
    }
    var HTMLCustomInputPropertyElement: {
        prototype: HTMLCustomInputPropertyElement;
        new (): HTMLCustomInputPropertyElement;
    };
    interface HTMLCustomOutcomeListPropertyElement extends Components.CustomOutcomeListProperty, HTMLStencilElement {
    }
    var HTMLCustomOutcomeListPropertyElement: {
        prototype: HTMLCustomOutcomeListPropertyElement;
        new (): HTMLCustomOutcomeListPropertyElement;
    };
    interface HTMLCustomOutcomePropertyElement extends Components.CustomOutcomeProperty, HTMLStencilElement {
    }
    var HTMLCustomOutcomePropertyElement: {
        prototype: HTMLCustomOutcomePropertyElement;
        new (): HTMLCustomOutcomePropertyElement;
    };
    interface HTMLCustomTextPropertyElement extends Components.CustomTextProperty, HTMLStencilElement {
    }
    var HTMLCustomTextPropertyElement: {
        prototype: HTMLCustomTextPropertyElement;
        new (): HTMLCustomTextPropertyElement;
    };
    interface HTMLMultiQuestionPropertyElement extends Components.MultiQuestionProperty, HTMLStencilElement {
    }
    var HTMLMultiQuestionPropertyElement: {
        prototype: HTMLMultiQuestionPropertyElement;
        new (): HTMLMultiQuestionPropertyElement;
    };
    interface HTMLQuestionCheckboxPropertyElement extends Components.QuestionCheckboxProperty, HTMLStencilElement {
    }
    var HTMLQuestionCheckboxPropertyElement: {
        prototype: HTMLQuestionCheckboxPropertyElement;
        new (): HTMLQuestionCheckboxPropertyElement;
    };
    interface HTMLQuestionPropertyElement extends Components.QuestionProperty, HTMLStencilElement {
    }
    var HTMLQuestionPropertyElement: {
        prototype: HTMLQuestionPropertyElement;
        new (): HTMLQuestionPropertyElement;
    };
    interface HTMLQuestionRadioPropertyElement extends Components.QuestionRadioProperty, HTMLStencilElement {
    }
    var HTMLQuestionRadioPropertyElement: {
        prototype: HTMLQuestionRadioPropertyElement;
        new (): HTMLQuestionRadioPropertyElement;
    };
    interface HTMLElementTagNameMap {
        "custom-elsa-switch-cases-property": HTMLCustomElsaSwitchCasesPropertyElement;
        "custom-input-property": HTMLCustomInputPropertyElement;
        "custom-outcome-list-property": HTMLCustomOutcomeListPropertyElement;
        "custom-outcome-property": HTMLCustomOutcomePropertyElement;
        "custom-text-property": HTMLCustomTextPropertyElement;
        "multi-question-property": HTMLMultiQuestionPropertyElement;
        "question-checkbox-property": HTMLQuestionCheckboxPropertyElement;
        "question-property": HTMLQuestionPropertyElement;
        "question-radio-property": HTMLQuestionRadioPropertyElement;
    }
}
declare namespace LocalJSX {
    interface CustomElsaSwitchCasesProperty {
        "activityModel"?: ActivityModel;
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
    }
    interface CustomInputProperty {
        "context"?: string;
        "customProperty"?: ITextProperty;
        "editorHeight"?: string;
        "index"?: number;
        "intellisenseContext"?: IntellisenseContext;
        "onValueChanged"?: (event: CustomEvent<ITextProperty>) => void;
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "showLabel"?: boolean;
        "singleLineMode"?: boolean;
        "supportedSyntaxes"?: Array<string>;
    }
    interface CustomOutcomeListProperty {
        "activityModel"?: ActivityModel;
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
    }
    interface CustomOutcomeProperty {
        "context"?: string;
        "editorHeight"?: string;
        "iconProvider"?: IconProvider;
        "index"?: number;
        "intellisenseContext"?: IntellisenseContext;
        "onDelete"?: (event: CustomEvent<IOutcomeProperty>) => void;
        "onValueChanged"?: (event: CustomEvent<IOutcomeProperty>) => void;
        "outcome"?: IOutcomeProperty;
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "showLabel"?: boolean;
        "singleLineMode"?: boolean;
        "supportedSyntaxes"?: Array<string>;
    }
    interface CustomTextProperty {
        "activityModel"?: ActivityModel;
        "editorHeight"?: string;
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
        "singleLine"?: boolean;
    }
    interface MultiQuestionProperty {
        "activityModel"?: ActivityModel;
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
    }
    interface QuestionCheckboxProperty {
        "onUpdateQuestion"?: (event: CustomEvent<IQuestionComponent>) => void;
        "question"?: CheckboxQuestion;
    }
    interface QuestionProperty {
        "ActivityModel"?: ActivityModel;
        "onUpdateQuestion"?: (event: CustomEvent<IQuestionComponent>) => void;
        "question"?: IQuestionComponent;
    }
    interface QuestionRadioProperty {
        "onUpdateQuestion"?: (event: CustomEvent<IQuestionComponent>) => void;
        "question"?: RadioQuestion;
    }
    interface IntrinsicElements {
        "custom-elsa-switch-cases-property": CustomElsaSwitchCasesProperty;
        "custom-input-property": CustomInputProperty;
        "custom-outcome-list-property": CustomOutcomeListProperty;
        "custom-outcome-property": CustomOutcomeProperty;
        "custom-text-property": CustomTextProperty;
        "multi-question-property": MultiQuestionProperty;
        "question-checkbox-property": QuestionCheckboxProperty;
        "question-property": QuestionProperty;
        "question-radio-property": QuestionRadioProperty;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "custom-elsa-switch-cases-property": LocalJSX.CustomElsaSwitchCasesProperty & JSXBase.HTMLAttributes<HTMLCustomElsaSwitchCasesPropertyElement>;
            "custom-input-property": LocalJSX.CustomInputProperty & JSXBase.HTMLAttributes<HTMLCustomInputPropertyElement>;
            "custom-outcome-list-property": LocalJSX.CustomOutcomeListProperty & JSXBase.HTMLAttributes<HTMLCustomOutcomeListPropertyElement>;
            "custom-outcome-property": LocalJSX.CustomOutcomeProperty & JSXBase.HTMLAttributes<HTMLCustomOutcomePropertyElement>;
            "custom-text-property": LocalJSX.CustomTextProperty & JSXBase.HTMLAttributes<HTMLCustomTextPropertyElement>;
            "multi-question-property": LocalJSX.MultiQuestionProperty & JSXBase.HTMLAttributes<HTMLMultiQuestionPropertyElement>;
            "question-checkbox-property": LocalJSX.QuestionCheckboxProperty & JSXBase.HTMLAttributes<HTMLQuestionCheckboxPropertyElement>;
            "question-property": LocalJSX.QuestionProperty & JSXBase.HTMLAttributes<HTMLQuestionPropertyElement>;
            "question-radio-property": LocalJSX.QuestionRadioProperty & JSXBase.HTMLAttributes<HTMLQuestionRadioPropertyElement>;
        }
    }
}
